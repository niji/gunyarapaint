<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                layout="absolute" width="420" height="349"
                backgroundGradientAlphas="[1.0, 1.0]"
                backgroundGradientColors="[#FFFFFF, #FFFFFF]"
                creationComplete="onCreationComplete()" enabled="false">
    <mx:Script>
        <![CDATA[
            import com.adobe.serialization.json.JSON;
            
            import mx.controls.Alert;
            import mx.core.UIComponent;
            import mx.events.SliderEvent;
            
            import org.libspark.gunyarapaint.framework.Painter;
            import org.libspark.gunyarapaint.framework.Player;
            import org.libspark.gunyarapaint.framework.events.PlayerEvent;
            import org.libspark.gunyarapaint.ui.v1.net.Request;
            
            private function onCreationComplete():void
            {
                var url:String = parameters["oelogUrl"];
                m_finished = true;
                m_continue = false;
                if (url) {
                    m_request = new Request();
                    m_request.addEventListener(Event.COMPLETE, onResponseLog);
                    m_request.get(url);
                    currentState = "loading";
                }
                else {
                    Alert.show("The value of oelogUrl is empty");
                }
            }
            
            private function onResponseLog(event:Event):void
            {
                var urlLoader:URLLoader = URLLoader(event.target);
                urlLoader.removeEventListener(Event.COMPLETE, onResponseLog);
                m_log = urlLoader.data;
                m_log.uncompress();
                var url:String = parameters["baseImgUrl"];
                if (url) {
                    var loader:Loader = new Loader();
                    m_request.loader = loader.contentLoaderInfo;
                    m_request.addEventListener(Event.COMPLETE, onResponseLayerImage);
                    m_request.load(url);
                }
                else {
                    play();
                }
            }
            
            private function onResponseLayerImage(event:Event):void
            {
                var loader:LoaderInfo = LoaderInfo(event.target);
                loader.removeEventListener(Event.COMPLETE, onResponseLayerImage);
                m_layerImage = Bitmap(loader.content).bitmapData;
                var url:String = parameters["baseImgInfoUrl"];
                if (url) {
                    m_request.loader = new URLLoader();
                    m_request.addEventListener(Event.COMPLETE, onResponseMetadata);
                    m_request.get(url);
                }
                else {
                    // 旧バージョン
                    play();
                }
            }
            
            private function onResponseMetadata(event:Event):void
            {
                var loader:URLLoader = URLLoader(event.target);
                loader.removeEventListener(Event.COMPLETE, onResponseMetadata);
                m_metadata = JSON.decode(String(loader.data));
                m_continue = true;
                play();
            }
            
            private function onChangePlayerSpeed(evt:SliderEvent):void
            {
                m_player.speed = playSpeedHSlider.value;
            }
            
            private function onClickPlay(evt:Event):void
            {
                play();
            }
            
            private function onClickStop(evt:Event):void
            {
                m_player.stop();
                currentState = "stopping";
            }
            
            private function onPlayFinished(event:PlayerEvent):void
            {
                currentState = "stopping";
                m_finished = true;
            }
            
            private function play():void
            {
                if (m_finished) {
                    createPlayer();
                    measureWindow();
                    callExternal();
                    m_finished = false;
                }
                currentState = "playing";
                m_player.speed = playSpeedHSlider.value;
                m_player.addEventListener(PlayerEvent.FINISHED, onPlayFinished);
                m_player.start();
            }
            
            private function createPlayer():void
            {
                if (m_layerImage && !m_metadata) {
                    m_metadata = {
                        "width": m_layerImage.width,
                        "height": m_layerImage.height,
                        "undoBufferSize": 16
                    };
                    m_continue = true;
                }
                m_log.position = 0;
                m_player = Player.create(m_log);
                if (m_continue)
                    m_player.layers.load(m_layerImage, m_metadata);
                canvas.removeAllChildren();
                var temp:UIComponent = new UIComponent();
                var g:Graphics = temp.graphics;
                g.beginFill(0xFFFFFF);
                g.drawRect(0, 0, m_player.width, m_player.height);
                m_player.layers.setView(temp);
                canvas.addChild(temp);
            }
            
            private function measureWindow():void
            {
                var w:uint = m_player.width;
                var h:uint = m_player.height;
                canvas.width = w + 2;
                canvas.height = h + 2;
                width = w + 20;
                width = w < 420 ? 420 : width;
                height = h + canvas.y + 20;
                height = height < 137 ? 137 : height; // for express install
            }
            
            private function callExternal():void
            {
                if (ExternalInterface.available) {
                    try {
                        ExternalInterface.call("changeGPLogPlayerRect", width, height);
                    }
                    catch (e:SecurityError) {
                        Alert.show(e.message);
                    }
                    catch (e:Error) {
                        Alert.show(e.message);
                    }
                }
            }
            
            private var m_log:ByteArray;
            private var m_layerImage:BitmapData;
            private var m_metadata:Object;
            private var m_player:Player;
            private var m_request:Request;
            private var m_continue:Boolean;
            private var m_finished:Boolean;
        ]]>
    </mx:Script>
    <mx:states>
        <mx:State name="loading">
            <mx:SetProperty name="enabled" value="true"/>
        </mx:State>
        <mx:State name="playing">
            <mx:SetProperty name="enabled" value="true"/>
            <mx:SetProperty target="{stopButton}" name="enabled" value="true"/>
        </mx:State>
        <mx:State name="stopping">
            <mx:SetProperty name="enabled" value="true"/>
            <mx:SetProperty target="{playButton}" name="enabled" value="true"/>
        </mx:State>
    </mx:states>
    <mx:Button id="playButton" x="10" y="9" label="再生" enabled="false" buttonDown="onClickPlay(event)"/>
    <mx:Button id="stopButton" x="66" y="9" label="停止" enabled="false" buttonDown="onClickStop(event)"/>
    <mx:Label x="122" y="11" text="再生スピード" />
    <mx:HSlider id="playSpeedHSlider" x="175" y="8" minimum="1" maximum="501" snapInterval="20" value="1" width="107" change="onChangePlayerSpeed(event)"/>
    <mx:Canvas id="canvas" x="10" width="400" height="300" y="39" borderStyle="solid"></mx:Canvas>
    <mx:Label x="313" y="11" text="{Painter.PAINTER_VERSION_STRING}"/>
</mx:Application>
