<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
                width="144" height="360"
                implements="com.github.niji.framework.ui.IController"
                xmlns:ui="com.github.niji.gunyarapaint.ui.v1.*">
    <mx:Script>
        <![CDATA[
            import com.github.niji.framework.BitmapLayer;
            import com.github.niji.framework.ILayer;
            import com.github.niji.framework.LayerList;
            import com.github.niji.framework.Painter;
            import com.github.niji.framework.UndoStack;
            import com.github.niji.framework.events.UndoEvent;
            import com.github.niji.framework.modules.CanvasModule;
            import com.github.niji.framework.modules.ICanvasModule;
            import com.github.niji.framework.ui.IApplication;
            import com.github.niji.gunyarapaint.ui.events.CheckBoxEditorEvent;
            import com.github.niji.gunyarapaint.ui.utils.ComponentResizer;
            
            import mx.collections.ArrayCollection;
            import mx.core.Application;
            import mx.events.DragEvent;
            import mx.events.FlexEvent;
            import mx.events.ListEvent;
            import mx.events.SliderEvent;
            
            public function init(app:IApplication):void
            {
                var layers:LayerList = app.layers;
                var currentLayerIndex:uint = layers.currentIndex;
                var currentLayerBlendMode:String = layers.at(currentLayerIndex).blendMode;
                var blendModes:Object = blendModeComboBox.dataProvider;
                var blendModeLength:uint = blendModes.length;
                var undo:UndoStack = app.undoStack;
                undo.addEventListener(UndoEvent.UNDO, onChangeUndo);
                undo.addEventListener(UndoEvent.REDO, onChangeUndo);
                blendModeComboBox.dataProvider = app.supportedBlendModes;
                layerDataGrid.selectedIndex = getSelectedIndex(layers);
                alphaSlider.value = layers.at(currentLayerIndex).alpha;
                for (var i:uint = 0; i < blendModeLength; i++) {
                    if (blendModes[i].data == currentLayerBlendMode)
                        blendModeComboBox.selectedIndex = i;
                }
                layerDataGrid.addEventListener(CheckBoxEditorEvent.DATA_CHANGED, onDataChange);
                ComponentResizer.addResize(this, new Point(144, 230));
                m_initPosition = new Point(x, y);
                update();
            }
            
            public function load(data:Object):void
            {
                var point:Object = data.point;
                move(point.x, point.y);
                update();
            }
            
            public function save(data:Object):void
            {
                data.point = new Point(x, y);
            }
            
            public function resetWindow():void
            {
                move(m_initPosition.x, m_initPosition.y);
            }
            
            public function update():void
            {
                var layers:LayerList = IApplication(Application.application).layers;
                var layer:BitmapLayer = BitmapLayer(layers.at(layers.currentIndex));
                var currentLayerBlendMode:String = layer.blendMode;
                layers.resetIndex();
                layerDataGrid.dataProvider = layers.toDataProvider();
                layerDataGrid.selectedIndex = getSelectedIndex(layers);
                alphaSlider.value = layer.alpha;
                updateBlendModeComboBox(currentLayerBlendMode);
            }
            
            public function swapEventListener(from:UndoStack, to:UndoStack):void
            {
                from.removeEventListener(UndoEvent.UNDO, onChangeUndo);
                from.removeEventListener(UndoEvent.REDO, onChangeUndo);
                to.addEventListener(UndoEvent.UNDO, onChangeUndo);
                to.addEventListener(UndoEvent.REDO, onChangeUndo);
            }
            
            private function onClickLayer(event:ListEvent):void
            {
                var app:IApplication = IApplication(Application.application);
                var layer:BitmapLayer = BitmapLayer(event.currentTarget.selectedItem);
                if (app.layers.currentIndex != layer.index) {
                    app.canvasModule.layerIndex = layer.index;
                    alphaSlider.value = layer.alpha;
                    updateBlendModeComboBox(layer.blendMode);
                }
            }
            
            private function onCreateLayer(event:Event):void
            {
                try {
                    // should catch AddLayerError here
                    var app:IApplication = IApplication(Application.application);
                    app.canvasModule.createLayer();
                    update();
                } catch (e:Error) {
                    Application.application.showAlert(e.message, title);
                }
            }
            
            private function onCopyLayer(event:Event):void
            {
                try {
                    // should catch AddLayerError here
                    var app:IApplication = IApplication(Application.application);
                    app.canvasModule.copyLayer();
                    update();
                } catch (e:Error) {
                    Application.application.showAlert(e.message, title);
                }
            }
            
            private function onRemoveLayer(event:Event):void
            {
                try {
                    // should catch RemoveLayerError here
                    var app:IApplication = IApplication(Application.application);
                    app.canvasModule.removeLayer();
                    update();
                } catch (e:Error) {
                    Application.application.showAlert(e.message, title);
                }
            }
            
            private function onMergeLayers(event:Event):void
            {
                try {
                    // should catch MergeLayersError here
                    var app:IApplication = IApplication(Application.application);
                    app.canvasModule.mergeLayers();
                    update();
                } catch (e:Error) {
                    Application.application.showAlert(e.message, title);
                }
            }
            
            private function onChangeAlphaSlider(event:SliderEvent):void
            {
                var app:IApplication = IApplication(Application.application);
                app.canvasModule.layerAlpha = event.value;
            }
            
            private function onSelectBlendMode(event:ListEvent):void
            {
                var app:IApplication = IApplication(Application.application);
                app.canvasModule.layerBlendMode = String(event.currentTarget.value);
            }
            
            private function onChangeUndo(event:UndoEvent):void
            {
                update();
            }
            
            private function onDragStart(event:DragEvent):void
            {
                var app:IApplication = IApplication(Application.application);
                m_selectedIndex = getSelectedIndex(app.layers);
            }
            
            private function onDragComplete(event:DragEvent):void
            {
                var app:IApplication = IApplication(Application.application);
                var a:Array = ArrayCollection(layerDataGrid.dataProvider).toArray().reverse();
                var length:uint = a.length;
                var layers:LayerList = app.layers;
                for (var i:uint = 0; i < length; i++) {
                    var from:uint = a[i].index;
                    var to:uint = layers.at(i).index;
                    if (from != to) {
                        app.canvasModule.swapLayers(from, to);
                        return;
                    }
                }
                // レイヤーの入れ替え処理がなかった場合は元のレイヤーの選択位置に戻すように
                // (例えばレイヤーウィンドウ外にレイヤーをドラッグした時とか)
                layerDataGrid.selectedIndex = m_selectedIndex;
            }
            
            private function onDataChange(event:CheckBoxEditorEvent):void
            {
                if (event.column === "visible") {
                    var module:ICanvasModule = IApplication(Application.application).canvasModule;
                    var layer:ILayer = ILayer(event.data);
                    module.setLayerVisible(layer.index, layer.visible);
                }
            }
            
            private function updateBlendModeComboBox(blendMode:String):void
            {
                var ac:ArrayCollection = blendModeComboBox.dataProvider as ArrayCollection;
                var length:uint = ac.length;
                for (var i:uint = 0; i < length; i++) {
                    if (ac.getItemAt(i).data == blendMode) {
                        blendModeComboBox.selectedIndex = i;
                        break;
                    }
                }
            }
            
            private function getSelectedIndex(layers:LayerList):uint
            {
                return layers.count - layers.currentIndex - 1;
            }
            
            private var m_initPosition:Point;
            private var m_selectedIndex:uint;
        ]]>
    </mx:Script>
    <ui:ExtendedDataGrid id="layerDataGrid" x="0" y="43" width="124" height="200" editable="true" sortableColumns="false" dragMoveEnabled="true" dragEnabled="true" dropEnabled="true"
                         itemClick="onClickLayer(event)" dragStart="onDragStart(event)" dragComplete="onDragComplete(event)">
        <ui:columns>
            <mx:DataGridColumn editable="false" headerText="目" dataField="visible" itemRenderer="com.github.niji.gunyarapaint.ui.v1.CheckBoxEditor" rendererIsEditor="true" width="20"/>
            <mx:DataGridColumn editable="false" headerText="ロ" dataField="locked" itemRenderer="com.github.niji.gunyarapaint.ui.v1.CheckBoxEditor" rendererIsEditor="true" width="20"/>
            <!--mx:DataGridColumn headerText="マ" dataField="maskCheck" itemRenderer="org.libspark.gunyarapaint.controls.CheckBoxEditor" rendererIsEditor="true" width="20"/-->
            <mx:DataGridColumn editable="true" headerText="レイヤ名" dataField="name"/>
        </ui:columns>
    </ui:ExtendedDataGrid>
    <mx:Button x="6" y="246" id="newLayerButton" label="新" width="22" paddingLeft="0" paddingRight="0" buttonDown="onCreateLayer(event)"/>
    <mx:Button x="36" y="246" id="copyLayerButton" label="複" width="22" paddingLeft="0" paddingRight="0" buttonDown="onCopyLayer(event)"/>
    <mx:Button x="66" y="246" id="deleteLayerButton" label="削" width="22" paddingLeft="0" paddingRight="0" buttonDown="onRemoveLayer(event)"/>
    <mx:Button x="96" y="246" id="mergeLayerButton" label="統" width="22" paddingLeft="0" paddingRight="0" buttonDown="onMergeLayers(event)"/>
    <mx:ComboBox id="blendModeComboBox" x="0" y="0" width="124" change="onSelectBlendMode(event)"></mx:ComboBox>
    <mx:Label x="5" y="23" text="透"/>
    <mx:HSlider id="alphaSlider" x="18" y="20" width="99" minimum="0.05" maximum="1" snapInterval="0.05" value="1" change="onChangeAlphaSlider(event)"/>
    <mx:Button id="horizontalMirrorButton" label="全レイヤー左右反転" width="117" height="17" buttonDown="IApplication(Application.application).canvasModule.horizontalMirror(LayerList.ALL_LAYERS)" y="273" x="3" fontSize="8.5"/>
    <mx:Button id="verticalMirrorButton" label="全レイヤー上下反転" width="117" height="17" buttonDown="IApplication(Application.application).canvasModule.verticalMirror(LayerList.ALL_LAYERS)" x="3" y="295" fontSize="8.5"/>
</mx:TitleWindow>
