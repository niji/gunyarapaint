<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="298" height="166"
                implements="com.github.niji.framework.ui.IController">
    <mx:Script>
        <![CDATA[
            import mx.core.Application;
            import mx.events.FlexEvent;
            import mx.events.ListEvent;
            import mx.events.NumericStepperEvent;
            import mx.managers.PopUpManager;
            
            import com.github.niji.framework.Painter;
            import com.github.niji.framework.UndoStack;
            import com.github.niji.framework.events.UndoEvent;
            import com.github.niji.framework.modules.ICanvasModule;
            import com.github.niji.framework.ui.IApplication;
            
            public function init(app:IApplication):void
            {
                var undo:UndoStack = app.undoStack;
                undo.addEventListener(UndoEvent.UNDO, onChangeUndo);
                undo.addEventListener(UndoEvent.REDO, onChangeUndo);
                undo.addEventListener(UndoEvent.PUSH, onChangeUndo);
                m_initPosition = new Point(x, y);
            }
            
            public function load(data:Object):void
            {
                var point:Object = data.point;
                move(point.x, point.y);
                updateUndoCount(IApplication(Application.application).undoStack);
                setRotate(data.rotate);
                setZoom(data.zoom);
            }
            
            public function save(data:Object):void
            {
                data.point = new Point(x, y);
                data.rotate = canvasRotate.value;
                data.zoom = canvasZoom.value;
            }
            
            public function resetWindow():void
            {
                move(m_initPosition.x, m_initPosition.y);
                setRotate(0);
                setZoom(1);
            }
            
            public function setRotate(value:Number):void
            {
                canvasRotate.value = value;
                canvasRotateValue.text = String(-canvasRotate.value);
                Application.application.canvasController.rotate(canvasRotate.value);
            }
            
            public function setZoom(value:Number):void
            {
                var n:Number = value;
                if (n < 1)
                    n = 1.0 / (-value + 2);
                n *= 10000;
                canvasZoom.value = value;
                Application.application.canvasController.zoom(value);  
                canvasZoomValue.text = String(Math.round(n) / 100);
            }
            
            public function swapEventListener(from:UndoStack, to:UndoStack):void
            {
                from.removeEventListener(UndoEvent.UNDO, onChangeUndo);
                from.removeEventListener(UndoEvent.REDO, onChangeUndo);
                from.removeEventListener(UndoEvent.PUSH, onChangeUndo);
                to.addEventListener(UndoEvent.UNDO, onChangeUndo);
                to.addEventListener(UndoEvent.REDO, onChangeUndo);
                to.addEventListener(UndoEvent.PUSH, onChangeUndo);
            }
            
            private function onChangeUndo(event:UndoEvent):void
            {
                var undoStack:UndoStack = UndoStack(event.target);
                updateUndoCount(undoStack);
            }
            
            // 数値入力で拡大率指定
            private function onChangeCanvasZoom(evt:Event):void
            {
                var value:Number = Number(canvasZoomValue.text);
                if (value <= 0) {
                    value = 1;
                }
                else if (value >= 100) {
                    value /= 100;
                }
                else {
                    value = -(100 / value) + 2;
                }
                setZoom(value);
            }
            
            // 数値入力でキャンバス回転角度指定
            private function onChangeCanvasRotate(evt:Event):void
            {
                setRotate(Number(canvasRotateValue.text));
            }
            
            private function onChangeAuxDivideCount(evt:NumericStepperEvent):void
            {
                Application.application.canvasController.auxDivideCount = uint(evt.value);
            }
            
            private function onChangeAuxBoxVisible(event:Event):void
            {
                Application.application.canvasController.auxBoxVisible = event.target.selected;
            }
            
            private function onChangeAuxSkewVisible(event:Event):void
            {
                Application.application.canvasController.auxSkewVisible = event.target.selected;
            }
            
            // 補助線種類の変更
            private function onChangeAuxType(evt:ListEvent):void
            {
                var n:Number = additionalNumberStepper.value;
                if (evt.currentTarget.value == 0) {
                    additionalNumberStepper.minimum = 2;
                    additionalNumberStepper.maximum = 16;
                    Application.application.canvasController.enableAuxPixel = false;
                }
                else {
                    additionalNumberStepper.minimum = 4;
                    additionalNumberStepper.maximum = 80;
                    Application.application.canvasController.enableAuxPixel = true;
                }
            }
            
            private function onChangeEnableBigPixel(event:Event):void
            {
                var module:ICanvasModule = IApplication(Application.application).canvasModule;
                module.setCompatibility(Painter.COMPATIBILITY_BIG_PIXEL, event.target.selected);
            }
            
            private function onChangeEnablePixelInfo(event:Event):void
            {
                Application.application.canvasController.enablePixelInfo = event.target.selected;
            }
            
            private function onChangeEnableUndoLayer(event:Event):void
            {
                var module:ICanvasModule = IApplication(Application.application).canvasModule;
                module.setCompatibility(Painter.COMPATIBILITY_UNDO_LAYER, event.target.selected);
            }
            
            private function updateUndoCount(undoStack:UndoStack):void
            {
                var undoCount:int = undoStack.undoCount;
                undoButton.label = _("Undo count");
                if (undoCount > 0) {
                    undoButton.label += " (" + undoCount + ")";
                    undoButton.enabled = true;
                }
                else {
                    undoButton.enabled = false;
                }
                var redoCount:int = undoStack.redoCount;
                redoButton.label = _("Redo count");
                if (redoCount > 0) {
                    redoButton.label += " (" + redoCount + ")";
                    redoButton.enabled = true;
                }
                else {
                    redoButton.enabled = false;
                }
            }
            
            private var m_initPosition:Point;
        ]]>
    </mx:Script>
    <mx:TabNavigator width="100%" height="100%" x="0" y="0">
        <mx:Canvas width="100%" height="100%" label="補助ツール">
            <mx:Label y="0" text="補助線" x="0"/>
            <mx:NumericStepper id="additionalNumberStepper" value="4" minimum="2" maximum="16" stepSize="1" x="32" height="18" fontSize="8" change="onChangeAuxDivideCount(event)" y="0"/>
            <mx:ComboBox y="0" id="additionalTypeComboBox" width="70" fontSize="8" height="18" selectedIndex="0" change="onChangeAuxType(event)" x="95">
                <mx:ArrayCollection id="auxTypes">
                    <mx:Object label="分割" data="0" />
                    <mx:Object label="ピクセル単位" data="1" />
                </mx:ArrayCollection>
            </mx:ComboBox>
            <mx:CheckBox id="additionalBoxCheckBox" label="縦横" fontSize="9" height="18" change="onChangeAuxBoxVisible(event)" x="175" y="0"/>
            <mx:CheckBox id="additionalSkewCheckBox" label="斜め" fontSize="9" height="18" change="onChangeAuxSkewVisible(event)" x="225" y="0"/>
            <mx:Button id="undoButton" y="24" label="アンドゥ" enabled="false" buttonDown="IApplication(Application.application).canvasModule.undo()" x="10"/>
            <mx:Button id="redoButton" y="24" label="リドゥ" enabled="false" buttonDown="IApplication(Application.application).canvasModule.redo()" x="110"/>
            <mx:Button id="rotateResetButton" y="52" label="角度" width="50" height="17" buttonDown="setRotate(0)" x="11"/>
            <mx:Button id="zoomResetButton" label="拡大" width="50" height="17" buttonDown="setZoom(1)" x="11" y="73"/>
            <mx:HSlider id="canvasRotate" y="52" width="152" minimum="-180" maximum="180" snapInterval="5" value="0" showDataTip="false" change="setRotate(event.value)" thumbDrag="setRotate(event.value)" x="64"/>
            <mx:HSlider id="canvasZoom" y="73" width="152" minimum="-4" maximum="32" snapInterval="0.5" value="1" showDataTip="false" change="setZoom(event.value)" thumbDrag="setZoom(event.value)" x="64"/>
            <mx:TextInput id="canvasRotateValue" y="52" width="32" height="17" right="28" fontSize="8" textAlign="right" text="0" restrict="0-9" maxChars="4" enter="onChangeCanvasRotate(event)"/>
            <mx:Label y="52" text="°" right="10"/>
            <mx:TextInput id="canvasZoomValue" y="73" width="32" height="17" right="28" fontSize="8" textAlign="right" text="100" restrict="0-9" maxChars="6" enter="onChangeCanvasZoom(event)"/>
            <mx:Label y="73" text="%" right="10"/>
        </mx:Canvas>
        <mx:Canvas width="100%" height="100%" label="互換性設定">
            <mx:CheckBox id="enableUndoLayerCheckBox" label="レイヤー選択をアンドゥに含めない" fontSize="9" height="18" change="onChangeEnableUndoLayer(event)" x="10" y="10"/>
            <mx:CheckBox id="enablePixelInfo" label="現在の座標から不透明度と色の情報を表示する" fontSize="9" height="18" change="onChangeEnablePixelInfo(event)" x="10" y="36" selected="true" />
            <!--
            <mx:CheckBox id="enableBigPixelCheckBox" label="太さに合わせたドット打ちを使えるようにする" fontSize="9" height="18" change="onChangeEnableBigPixel(event)" x="10" y="36" selected="true"/>
            -->
        </mx:Canvas>
    </mx:TabNavigator>
</mx:TitleWindow>
