<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="300" height="205"
                implements="org.libspark.gunyarapaint.ui.v1.IController"
                initialize="onInitialize()" removedFromStage="onRemove()"
                creationComplete="onCreationComplete()">
    <mx:Script>
        <![CDATA[
            import mx.core.Application;
            import mx.events.FlexEvent;
            import mx.events.ListEvent;
            import mx.events.NumericStepperEvent;
            import mx.managers.PopUpManager;
            
            import org.libspark.gunyarapaint.framework.Painter;
            import org.libspark.gunyarapaint.framework.UndoStack;
            import org.libspark.gunyarapaint.framework.events.UndoEvent;
            import org.libspark.gunyarapaint.framework.ui.IApplication;
            
            public function load(data:Object):void
            {
                var point:Object = data.point;
                move(point.x, point.y);
                setRotate(data.rotate);
                setZoom(data.zoom);
            }
            
            public function save(data:Object):void
            {
                data.point = new Point(x, y);
                data.rotate = canvasRotate.value;
                data.zoom = canvasZoom.value;
            }
            
            public function resetWindow():void
            {
                move(m_initPosition.x, m_initPosition.y);
                setRotate(0);
                setZoom(1);
            }
            
            public function setRotate(value:Number):void
            {
                canvasRotate.value = value;
                canvasRotateValue.text = String(-canvasRotate.value);
                Application.application.canvasController.rotate(canvasRotate.value);
            }
            
            public function setZoom(value:Number):void
            {
                var n:Number = value;
                if (n < 1)
                    n = 1.0 / (-value + 2);
                n *= 10000;
                canvasZoom.value = value;
                Application.application.canvasController.zoom(value);  
                canvasZoomValue.text = String(Math.round(n) / 100);
            }
            
            private function onInitialize():void
            {
                var undo:UndoStack = IApplication(Application.application).undoStack;
                undo.addEventListener(UndoEvent.UNDO, onChangeUndo);
                undo.addEventListener(UndoEvent.REDO, onChangeUndo);
                undo.addEventListener(UndoEvent.PUSH, onChangeUndo);
            }
            
            private function onCreationComplete():void
            {
                m_initPosition = new Point(x, y);
            }
            
            private function onRemove():void
            {
                var undo:UndoStack = IApplication(Application.application).undoStack;
                undo.removeEventListener(UndoEvent.UNDO, onChangeUndo);
                undo.removeEventListener(UndoEvent.REDO, onChangeUndo);
                undo.removeEventListener(UndoEvent.PUSH, onChangeUndo);
            }
            
            private function onChangeUndo(event:UndoEvent):void
            {
                var undoStack:UndoStack = UndoStack(event.target);
                var undoCount:int = undoStack.undoCount;
                undoButton.label = 'アンドゥ ';
                if (undoCount > 0) {
                    undoButton.label += '(' + undoCount + ')';
                    undoButton.enabled = true;
                }
                else {
                    undoButton.enabled = false;
                }
                var redoCount:int = undoStack.redoCount;
                redoButton.label = 'リドゥ ';
                if (redoCount > 0) {
                    redoButton.label += '(' + redoCount + ')';
                    redoButton.enabled = true;
                }
                else {
                    redoButton.enabled = false;
                }
            }
            
            // 数値入力で拡大率指定
            private function onChangeCanvasZoom(evt:Event):void
            {
                var value:Number = Number(canvasZoomValue.text);
                if (value <= 0) {
                    value = 1;
                }
                else if (value >= 100) {
                    value /= 100;
                }
                else {
                    value = -(100 / value) + 2;
                }
                setZoom(value);
            }
            
            // 数値入力でキャンバス回転角度指定
            private function onChangeCanvasRotate(evt:Event):void
            {
                setRotate(Number(canvasRotateValue.text));
            }
            
            private function onChangeAuxDivideCount(evt:NumericStepperEvent):void
            {
                Application.application.canvasController.auxDivideCount = uint(evt.value);
            }
            
            private function onChangeAuxBoxVisible(evt:Event):void
            {
                Application.application.canvasController.auxBoxVisible = evt.target.selected;
            }
            
            private function onChangeAuxSkewVisible(evt:Event):void
            {
                Application.application.canvasController.auxSkewVisible = evt.target.selected;
            }
            
            // 補助線種類の変更
            private function onChangeAuxType(evt:ListEvent):void
            {
                var n:Number = additionalNumberStepper.value;
                if (evt.currentTarget.value == 0) {
                    additionalNumberStepper.minimum = 2;
                    additionalNumberStepper.maximum = 16;
                    Application.application.canvasController.enableAuxPixel = false;
                }
                else {
                    additionalNumberStepper.minimum = 4;
                    additionalNumberStepper.maximum = 80;
                    Application.application.canvasController.enableAuxPixel = true;
                }
            }
            
            private function onLoad(evt:FlexEvent):void
            {
                var controller:DataController = new DataController();
                PopUpManager.addPopUp(controller, this, true);
                // w.password = gpCanvas.logger.password;
            }
            
            private var m_initPosition:Point;
        ]]>
    </mx:Script>
    <mx:Canvas x="10" y="0" height="163" width="260">
        <mx:Button id="rotateResetButton" y="63" label="角度" width="29" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" height="17" right="204" buttonDown="setRotate(0)"/>
        <mx:Button id="zoomResetButton" y="81" label="拡大" width="29" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" height="17" right="204" buttonDown="setZoom(1)"/>
        <mx:HSlider id="canvasRotate" y="62" width="152" minimum="-180" maximum="180" snapInterval="5" value="0"  right="49" showDataTip="false" change="setRotate(event.value)" thumbDrag="setRotate(event.value)"/>
        <mx:HSlider id="canvasZoom" y="79" width="152" minimum="-4" maximum="19" snapInterval="0.1" value="1"  right="49" showDataTip="false" change="setZoom(event.value)" thumbDrag="setZoom(event.value)"/>
        <mx:TextInput id="canvasRotateValue" y="66" width="32" height="17" right="18" fontSize="8" textAlign="right" text="0" restrict="0-9" maxChars="4" enter="onChangeCanvasRotate(event)"/>
        <mx:Label y="66" text="°" right="0"/>
        <mx:TextInput id="canvasZoomValue" y="83" width="32" height="17" right="18" fontSize="8" textAlign="right" text="100" restrict="0-9" maxChars="6" enter="onChangeCanvasZoom(event)"/>
        <mx:Label y="83" text="%" right="0"/>
        <mx:Label y="4" text="補助線" right="199"/>
        <mx:NumericStepper id="additionalNumberStepper" y="4" value="4" minimum="2" maximum="16" stepSize="1" right="143" height="18" fontSize="8" change="onChangeAuxDivideCount(event)"/>
        <mx:CheckBox id="additionalBoxCheckBox" y="2" label="縦横" right="8" fontSize="9" height="18" change="onChangeAuxBoxVisible(event)"/>
        <mx:CheckBox id="additionalSkewCheckBox" y="18" label="斜め" right="9" fontSize="9" height="18" change="onChangeAuxSkewVisible(event)"/>
        <mx:Button id="undoButton" y="38" label="アンドゥ" enabled="false" paddingLeft="3" paddingRight="3" right="89" buttonDown="IApplication(Application.application).canvasModule.undo()"/>
        <mx:Button id="redoButton" y="38" label="リドゥ" enabled="false" paddingLeft="3" paddingRight="3" right="12" buttonDown="IApplication(Application.application).canvasModule.redo()"/>
        <mx:Button id="logPlayButton" y="105" label="ログプレイ" visible="false" right="99"/>
        <mx:Button id="checkPngButton" y="105" label="同一check" visible="false" right="10"/>
        <mx:ComboBox y="4" id="additionalTypeComboBox" right="66" width="70" fontSize="8" height="18" selectedIndex="0" change="onChangeAuxType(event)">
            <mx:ArrayCollection id="auxTypes">
                <mx:Object label="分割" data="0" />
                <mx:Object label="px単位" data="1" />
            </mx:ArrayCollection>
        </mx:ComboBox>
        <mx:Button id="windowsResetButton" x="146" y="136" label="ウィンドウ初期状態" width="104" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" height="17" buttonDown="Application.application.resetWindowsPosition()"/>
        <mx:Button id="horizontalMirrorButton" x="10" y="111" label="全レイヤー左右反転" width="120" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" height="17" buttonDown="IApplication(Application.application).canvasModule.horizontalMirror(Painter.ALL_LAYERS)"/>
        <mx:Button id="verticalMirrorButton" x="10" y="136" label="全レイヤー上下反転" width="120" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" height="17" buttonDown="IApplication(Application.application).canvasModule.verticalMirror(Painter.ALL_LAYERS)"/>
        <mx:Button id="passwordButton" x="146" y="111" label="ふっかつのじゅもん" width="104" paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" height="17" buttonDown="onLoad(event)"/>
    </mx:Canvas>
</mx:TitleWindow>
