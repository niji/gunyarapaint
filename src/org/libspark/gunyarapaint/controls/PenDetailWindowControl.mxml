<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="128" height="450" xmlns:ns1="org.libspark.gunyarapaint.controls.*">
    <mx:Script>
        <![CDATA[
            import mx.containers.GridItem;
            import mx.core.Application;
            import mx.effects.easing.Bounce;
            import mx.events.FlexEvent;
            import mx.events.ListEvent;
            import mx.events.SliderEvent;
            
            import org.libspark.gunyarapaint.framework.modules.DrawModuleFactory;
            
            private var m_gridItemPalette:GridItem;
            
            // Ctrlとかのショートカットキーで変わったペンToolを戻す
            public function reset():void
            {
                if (dropperButton.selected) {
                    pen = DrawModuleFactory.DROPPER;
                }
                else if (handtoolButton.selected) {
                    currentState = "handtool";
                }
                else if (eraserButton.selected) {
                    pen = DrawModuleFactory.ERASER;
                    IDelegate(Application.application).module.blendMode = BlendMode.ERASE;
                }
                else if (dotButton.selected) {
                    pen = DrawModuleFactory.PIXEL;
                }
                else {
                    pen = String(blendModeComboBox.value);
                    IDelegate(Application.application).module.blendMode = String(blendModeComboBox.value);
                }
            }
            
            public function cancel():void
            {
                dropperButton.selected = false;
                handtoolButton.selected = false;
                eraserButton.selected = false;
                dotButton.selected = false;
                var delegate:IDelegate = IDelegate(Application.application);
                delegate.setModule(String(blendModeComboBox.value));
            }
            
            public function drawPreview(color:uint, alpha:Number, thickness:uint):void
            {
                var g:Graphics = previewCanvas.graphics;
                g.clear();
                g.beginFill(color, alpha);
                g.drawCircle((previewCanvas.width) / 2, (previewCanvas.height) / 2, thickness / 2);
                g.endFill();
            }
            
            // TODO:整理する
            public function changePen(mode:String, color:uint, alpha:Number, thickness:uint):void
            {
                m_gridItemPalette.setStyle('backgroundColor', color);
                setColorRGBSlider(color);
                drawPreview(color, alpha, thickness);
                currentState = mode;
            }
            
            public function get dataForPost():Object
            {
                return [palettes]; // TODO: 現在は１１1パレットのみだけど、配列化する
            }
            
            /*
            public function set delegate(value:IDelegate):void
            {
            penDetail.logger = l;
            if (_logger.baseInfo) {
            var a:Array = _logger.baseInfo['pen_details'];
            if (a) {
            penDetail.baseImgInfo = a[0];
            for (var i:uint = 0; i < a.length; i++) {
            penDetail[i].baseImgInfo = a[i];
            }
            }
            }
            }
            */
            
            public function get palettes():Object
            {
                var palettes:Array = [];
                for (var i:uint = 1; i < 21; i++) {
                    var gridItem:GridItem = GridItem(this["gridItemPalette" + i]);
                    palettes.push(gridItem.getStyle("backgroundColor"));
                }
                return { "palettes": palettes };
            }
            
            public function set palettes(value:Object):void
            {
                for (var i:uint = 1; i < 21; i++) {
                    var palette:uint = value["palettes"][i - 1];
                    var gridItem:GridItem = GridItem(this["gridItemPalette" + i]);
                    gridItem.setStyle("backgroundColor", palette);
                }
            }
            
            public function set pen(mode:String):void
            {
                currentState = mode;
                if (mode != "handtool")
                    IDelegate(Application.application).setModule(currentState);
            }
            
            public function set thickness(t:uint):void
            {
                IDelegate(Application.application).module.thickness = thicknessSlider.value = t;
            }
            
            private function onInitialize():void
            {
                blendModeComboBox.dataProvider = IDelegate(Application.application).supportedBlendModes;
                onClickPalette(1);
                // 初期値と設定値が一緒なのでイベントが飛んでこない、明示的に呼んであげる
                drawPreview(0x000000, 1, 3);
            }
            
            private function onClickPalette(index:uint):void
            {
                var palette:GridItem = this["gridItemPalette" + index];
                if (m_gridItemPalette) {
                    m_gridItemPalette.setStyle("borderThickness", 1);
                    m_gridItemPalette.setStyle("borderColor", 0xb7babc);
                }
                palette.setStyle("borderThickness", 3);
                palette.setStyle("borderColor", 0x000000);
                m_gridItemPalette = palette;
                IDelegate(Application.application).module.color = m_gridItemPalette.getStyle("backgroundColor");
                setColorRGBSlider(m_gridItemPalette.getStyle("backgroundColor")); // 20090905-haku2 ins
            }
            
            private function onClickColorPicker(evt:FlexEvent):void
            {
                /*
                // FIXME: お絵かきのログにパレット変更も反映したい
                var picker:SColorPicker = new SColorPicker();
                picker.selectedColor = m_gridItemPalette.getStyle('backgroundColor');
                picker.title = "パレットに入れる色を選んでください。";
                
                // display the 'x' close button
                picker.showCloseButton = true;  
                // picker.add_swatch = true;
                // picker.picker_enabled = true;
                
                picker.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void { PopUpManager.removePopUp(IFlexDisplayObject(event.target)); } );
                picker.addEventListener(SPickerEvent.CHANGING, pickerHandler);
                picker.addEventListener(SPickerEvent.SWATCH_ADD, pickerHandler);
                picker.addEventListener(Event.CHANGE, pickerHandler);
                
                PopUpManager.addPopUp(picker, Application.application as DisplayObject, true);
                PopUpManager.centerPopUp(picker);
                */
            }
            
            private function onPicker(evt:Event):void
            {
                /*
                if (evt.type == SPickerEvent.CHANGING) { // avoid bug of component
                }
                else if (evt.type == SPickerEvent.SWATCH_ADD) {
                }
                else if (evt.type == Event.CHANGE) {
                var color:uint = SColorPicker(evt.target).selectedColor;
                m_delegate.module.color = color;
                m_gridItemPalette.setStyle("backgroundColor", color);
                setColRGBSlider(color); // 20090905-haku2 ins
                PopUpManager.removePopUp(IFlexDisplayObject(evt.target));
                }
                */
            }
            
            private function onSelectHandTool(evt:Event):void
            {
                trace(Button(evt.currentTarget).selected);
                if (Button(evt.currentTarget).selected)
                    currentState = "none";
                else
                    pen = "handtool";
            }
            
            private function onSelectDropper(evt:Event):void
            {
                if (Button(evt.currentTarget).selected)
                    currentState = "none";
                else
                    pen = DrawModuleFactory.DROPPER;
            }
            
            private function onSelectEraser(evt:Event):void
            {
                if (Button(evt.currentTarget).selected)
                    currentState = "none";
                else {
                    pen = DrawModuleFactory.ERASER;
                    IDelegate(Application.application).module.blendMode = BlendMode.ERASE;
                }
            }
            
            private function onSelectDot(evt:Event):void
            {
                if (Button(evt.currentTarget).selected)
                    currentState = "none";
                else
                    pen = DrawModuleFactory.PIXEL;
            }
            
            private function onSelectPen(evt:ListEvent):void
            {
                cancel();
                var delegate:IDelegate = IDelegate(Application.application);
                delegate.setModule(String(evt.currentTarget.value));
            }
            
            private function onSelectBlendMode(evt:ListEvent):void
            {
                cancel();
                IDelegate(Application.application).module.blendMode = String(evt.currentTarget.value);
            }
            
            private function onChangeThicknessSlider(evt:SliderEvent):void
            {
                IDelegate(Application.application).module.thickness = evt.value;
            }
            
            // 選択した色をRGBスライダに反映
            private function setColorRGBSlider(color:uint):void
            {
                colBSlider.value = color % 256;
                color >>>= 8;
                colGSlider.value = color % 256;
                color >>>= 8;
                colRSlider.value = color % 256;
            }
            
            private function onChangeColorSlider(evt:SliderEvent, mode:String):void
            {
                var color:uint = 0;
                switch (mode) {
                    case "red":
                        color += evt.value * 65536;
                        color += colGSlider.value * 256;
                        color += colBSlider.value;
                        break;
                    case "green":
                        color += colRSlider.value * 65536;
                        color += evt.value * 256;
                        color += colBSlider.value;
                        break;
                    case "blue":
                        color += colRSlider.value * 65536;
                        color += colGSlider.value * 256;
                        color += evt.value;
                        break;
                }
                IDelegate(Application.application).module.color = color;
                m_gridItemPalette.setStyle('backgroundColor', color);
            }
            
            private function onChangeAlphaSlider(evt:SliderEvent):void
            {
                IDelegate(Application.application).module.alpha = evt.value;
            }
        ]]>
    </mx:Script>
    
    <mx:states>
        <mx:State name="dropper">
            <mx:SetProperty target="{thicknessButton1}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton2}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton3}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton4}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton5}" name="enabled" value="false"/>
            <mx:SetProperty target="{blendModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{alphaSlider}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessSlider}" name="enabled" value="false"/>
            <mx:SetProperty target="{penModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{dropperButton}" name="selected" value="true"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="floodFill">
            <mx:SetProperty target="{thicknessButton1}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton2}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton3}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton4}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton5}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessSlider}" name="enabled" value="false"/>
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="handtool">
            <mx:SetProperty target="{thicknessButton1}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton2}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton3}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton4}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton5}" name="enabled" value="false"/>
            <mx:SetProperty target="{penModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{blendModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{alphaSlider}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessSlider}" name="enabled" value="false"/>
            <mx:SetProperty target="{paletteGrid}" name="enabled" value="false"/>
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="true"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="none">
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="pixel">
            <mx:SetProperty target="{thicknessButton1}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton2}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton4}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton3}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessButton5}" name="enabled" value="false"/>
            <mx:SetProperty target="{thicknessSlider}" name="enabled" value="false"/>
            <mx:SetProperty target="{blendModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="true"/>
        </mx:State>
        <mx:State name="freeHand">
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="line">
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="circle">
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="false"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
        <mx:State name="eraser">
            <mx:SetProperty target="{penModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{blendModeComboBox}" name="enabled" value="false"/>
            <mx:SetProperty target="{paletteGrid}" name="enabled" value="false"/>
            <mx:SetProperty target="{dropperButton}" name="selected" value="false"/>
            <mx:SetProperty target="{handtoolButton}" name="selected" value="false"/>
            <mx:SetProperty target="{eraserButton}" name="selected" value="true"/>
            <mx:SetProperty target="{dotButton}" name="selected" value="false"/>
        </mx:State>
    </mx:states>
    
    <mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="108" height="410" initialize="onInitialize()">
        
        <!-- preview -->
        <mx:Label x="3" y="10" text="ペンの状態" width="53.5"/>
        <mx:Canvas x="64.5" y="1" width="30" height="30" id="previewCanvas" borderStyle="solid" borderThickness="1" borderColor="#000000">
        </mx:Canvas>
        
        <!-- thickness -->
        <mx:Label x="3" y="28" text="太"/>
        <mx:HSlider x="16" y="28" width="87" minimum="1" maximum="30" snapInterval="1" height="12" value="3" id="thicknessSlider" change="onChangeThicknessSlider(event)"/>
        <mx:Button x="2" y="47" label="極" width="20" paddingLeft="0" paddingRight="0" id="thicknessButton1" click="thickness = 1"/>
        <mx:Button x="23" y="47" label="細" width="20" paddingLeft="0" paddingRight="0" id="thicknessButton2" click="thickness = 3"/>
        <mx:Button x="44" y="47" label="中" width="20" paddingLeft="0" paddingRight="0" id="thicknessButton3" click="thickness = 10"/>
        <mx:Button x="65" y="47" label="太" width="20" paddingLeft="0" paddingRight="0" id="thicknessButton4" click="thickness = 20"/>
        <mx:Button x="86" y="47" label="極" width="20" paddingLeft="0" paddingRight="0" id="thicknessButton5" click="thickness = 30"/>
        
        <!-- color palette -->
        <mx:Grid id="paletteGrid" x="15" y="73" borderStyle="none" borderColor="#000000" borderThickness="1" horizontalGap="4" verticalGap="3">
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#000000" id="gridItemPalette1" click="onClickPalette(1);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#ffffff" id="gridItemPalette2" click="onClickPalette(2);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette3" click="onClickPalette(3);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#888888" id="gridItemPalette4" click="onClickPalette(4);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#b47575" id="gridItemPalette5" click="onClickPalette(5);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette6" click="onClickPalette(6);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#c096c0" id="gridItemPalette7" click="onClickPalette(7);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#fa9696" id="gridItemPalette8" click="onClickPalette(8);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette9" click="onClickPalette(9);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#8080ff" id="gridItemPalette10" click="onClickPalette(10);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#ffb6ff" id="gridItemPalette11" click="onClickPalette(11);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette12" click="onClickPalette(12);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#e7e58d" id="gridItemPalette13" click="onClickPalette(13);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#25c7c9" id="gridItemPalette14" click="onClickPalette(14);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette15" click="onClickPalette(15);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#99cb80" id="gridItemPalette16" click="onClickPalette(16);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#e7962d" id="gridItemPalette17" click="onClickPalette(17);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette18" click="onClickPalette(18);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
            <mx:GridRow width="100%" height="100%">
                <mx:GridItem width="24" height="20" backgroundColor="#f9ddcf" id="gridItemPalette19" click="onClickPalette(19);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#fcece2" id="gridItemPalette20" click="onClickPalette(20);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
                <mx:GridItem width="24" height="20" backgroundColor="#FFFFFF" id="gridItemPalette21" click="onClickPalette(21);" borderStyle="solid" cornerRadius="5">
                </mx:GridItem>
            </mx:GridRow>
        </mx:Grid>
        
        <!-- tools -->
        <mx:Button id="colorPickerButton" x="21.5" y="235" label="色選択画面" width="65" paddingLeft="0" paddingRight="0" buttonDown="onClickColorPicker(event)"/>
        <mx:Button id="dropperButton" x="5" y="260" toggle="true"  icon="@Embed(source='../../../../../imgs/icon_dropper.png')" width="22" paddingLeft="0" paddingRight="0" change="onSelectDropper(event)"/>
        <mx:Button id="handtoolButton" x="31" y="260" toggle="true"  icon="@Embed(source='../../../../../imgs/icon_hand_open.png')" width="22" paddingLeft="0" paddingRight="0" change="onSelectHandTool(event)"/>
        <mx:Button id="eraserButton" x="56" y="260" toggle="true" label="消" width="22" paddingLeft="0" paddingRight="0" change="onSelectEraser(event)"/>
        <mx:Button id="dotButton" x="81" y="260" toggle="true" label="ド" width="22" paddingLeft="0" paddingRight="0" change="onSelectDot(event)"/>
        
        <!-- alpha -->
        <mx:Label x="3" y="285" text="透"/>
        <mx:Label x="1" y="295" text="{alphaSlider.value}" width="28" enabled="false" fontSize="8"/>
        <mx:HSlider id ="alphaSlider" x="20" y="282" width="87" minimum="0.05" maximum="1" snapInterval="0.05" value="1" change="onChangeAlphaSlider(event)"/>
        
        <!-- rgb -->
        <mx:Label x="3" y="304" text="R"/>
        <mx:Label x="1" y="313" text="{colRSlider.value}" width="20" textAlign="right" enabled="false" fontSize="8"/>
        <mx:HSlider id ="colRSlider" x="20" y="301" width="87" minimum="0" maximum="255" snapInterval="1" change="onChangeColorSlider(event, 'red')"/>
        <mx:Label x="3" y="319" text="G"/>
        <mx:Label x="1" y="328" text="{colGSlider.value}" width="20" textAlign="right" enabled="false" fontSize="8"/>
        <mx:HSlider id ="colGSlider" x="20" y="316" width="87" minimum="0" maximum="255" snapInterval="1" change="onChangeColorSlider(event, 'green')"/>
        <mx:Label x="3" y="334" text="B"/>
        <mx:Label x="1" y="343" text="{colBSlider.value}" width="20" textAlign="right" enabled="false" fontSize="8"/>
        <mx:HSlider id ="colBSlider" x="20" y="331" width="87" minimum="0" maximum="255" snapInterval="1" change="onChangeColorSlider(event, 'blue')"/>
        
        <!-- line method/blend mode -->
        <mx:ComboBox id="penModeComboBox" x="6" y="356" width="96" change="onSelectPen(event)">
            <mx:ArrayCollection>
                <mx:Object label="手書き" data="{DrawModuleFactory.FREE_HAND}" />
                <mx:Object label="直線" data="{DrawModuleFactory.LINE}" />
                <mx:Object label="円" data="{DrawModuleFactory.CIRCLE}" />
                <mx:Object label="ペイント" data="{DrawModuleFactory.FLOOD_FILL}" />
                <!--
                <mx:Object label="スポイト" data="" />
                <mx:Object label="四角" data="" />
                <mx:Object label="楕円" data="" />
                <mx:Object label="角丸四角" data="" />
                -->
            </mx:ArrayCollection>
        </mx:ComboBox>
        <mx:ComboBox id="blendModeComboBox" x="6" y="381" width="97" change="onSelectBlendMode(event)">
        </mx:ComboBox>
    </mx:Canvas>
    <!-- palette select animation -->
    <mx:Resize id="selectPaletteEffect" widthFrom="24" widthTo="24"
               heightFrom="20" heightTo="20"
               easingFunction="{Bounce.easeOut}" />
</mx:TitleWindow>
